import { useState, useEffect } from "react";
import { useTheme } from "../../hooks/useTheme";
import styles from "./GenderPredictor.module.css";

interface GenderData {
  name: string;
  gender: "male" | "female";
  country: string;
  probability: number;
  remaining_credits: number;
}

export default function GenderPredictor() {
  const [name, setName] = useState("");
  const [genderData, setGenderData] = useState<GenderData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [remainingCredits, setRemainingCredits] = useState<number | null>(null);
  const [autoDetect, setAutoDetect] = useState(false);
  const { theme } = useTheme();

  const API_URL = "https://api.genderapi.io/api/";

  const capitalizeName = (str: string) => {
    if (!str) return "";
    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
  };

  // useEffect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏
  useEffect(() => {
    if (!autoDetect || !name.trim() || name.length < 2) return;

    const timer = setTimeout(() => {
      fetchGender();
    }, 800); // –ó–∞–¥–µ—Ä–∂–∫–∞ 800–º—Å –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

    return () => clearTimeout(timer);
  }, [name, autoDetect]);

  // useEffect –¥–ª—è —Å–±—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º—ã
  useEffect(() => {
    setError(""); 
  }, [theme]);

  const fetchGender = async () => {
    setIsLoading(true);
    setError("");
    setGenderData(null);

    try {
      const response = await fetch(
        `${API_URL}?name=${encodeURIComponent(name)}`
      );

      if (!response.ok) {
        if (remainingCredits === 0 || null) {
          throw new Error("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
      }

      const data = await response.json();

      if (data.gender === null) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª –¥–ª—è —ç—Ç–æ–≥–æ –∏–º–µ–Ω–∏");
        return;
      }

      setGenderData(data);
      setRemainingCredits(data.remaining_credits);
    } catch (err) {
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name.trim()) {
      setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è");
      return;
    }

    if (name.length < 2) {
      setError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞");
      return;
    }

    fetchGender();
  };

  const getGenderTranslation = (gender: string) => {
    return gender === "male" ? "–º—É–∂—Å–∫–æ–π" : "–∂–µ–Ω—Å–∫–∏–π";
  };

  const getCountryName = (countryCode: string) => {
    const countryNames: Record<string, string> = {
      US: "–°–®–ê",
      RU: "–†–æ—Å—Å–∏—è",
      DE: "–ì–µ—Ä–º–∞–Ω–∏—è",
      FR: "–§—Ä–∞–Ω—Ü–∏—è",
      GB: "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
      CN: "–ö–∏—Ç–∞–π",
      JP: "–Ø–ø–æ–Ω–∏—è",
      BR: "–ë—Ä–∞–∑–∏–ª–∏—è",
      IN: "–ò–Ω–¥–∏—è",
      IT: "–ò—Ç–∞–ª–∏—è",
      ES: "–ò—Å–ø–∞–Ω–∏—è",
      // –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    };

    return countryNames[countryCode] || countryCode;
  };

  return (
    <div
      className={`${styles.container} ${
        theme === "dark" ? styles.darkTheme : ""
      }`}
    >
      <div className={styles.card}>
        <h2 className={styles.title}>üë§ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ–ª–∞ –ø–æ –∏–º–µ–Ω–∏</h2>
        <p className={styles.subtitle}>–£–∑–Ω–∞–π—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏</p>

        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.inputGroup}>
            <label htmlFor="nameInput" className={styles.label}>
              –í–≤–µ–¥–∏—Ç–µ –∏–º—è:
            </label>
            <input
              id="nameInput"
              type="text"
              value={name}
              onChange={(e) => {
                setName(e.target.value);
                setError("");
              }}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è..."
              className={styles.input}
              disabled={isLoading}
            />
            {error && <p className={styles.errorText}>{error}</p>}
          </div>

          <div className={styles.autoDetect}>
            <label className={styles.checkboxLabel}>
              <input
                type="checkbox"
                checked={autoDetect}
                onChange={(e) => setAutoDetect(e.target.checked)}
                className={styles.checkbox}
              />
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ
            </label>
          </div>

          <button type="submit" className={styles.button} disabled={isLoading}>
            {isLoading ? "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ..." : "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª"}
          </button>
        </form>

        {isLoading && (
          <div className={styles.loading}>
            <div className={styles.spinner}></div>
            <p>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞...</p>
          </div>
        )}

        {genderData && (
          <div className={styles.results}>
            <h3 className={styles.resultsTitle}>
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è "{capitalizeName(genderData.name)}":
            </h3>
            <div className={styles.resultGrid}>
              <div className={styles.resultItem}>
                <span className={styles.resultLabel}>–ò–º—è:</span>
                <span className={styles.resultValue}>
                  {capitalizeName(genderData.name)}
                </span>
              </div>
              <div className={styles.resultItem}>
                <span className={styles.resultLabel}>–ü–æ–ª:</span>
                <span className={styles.resultValue}>
                  {getGenderTranslation(genderData.gender)}
                </span>
              </div>
              <div className={styles.resultItem}>
                <span className={styles.resultLabel}>–°—Ç—Ä–∞–Ω–∞:</span>
                <span className={styles.resultValue}>
                  {getCountryName(genderData.country)}
                </span>
              </div>
              <div className={styles.resultItem}>
                <span className={styles.resultLabel}>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:</span>
                <span className={styles.resultValue}>
                  {genderData.probability}%
                </span>
              </div>
              <div className={styles.resultItem}>
                <span className={styles.resultLabel}>–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤:</span>
                <span className={styles.resultValue}>
                  {genderData.remaining_credits}
                </span>
              </div>
            </div>
          </div>
        )}

        {remainingCredits !== null && (
          <div className={styles.credits}>
            <p>–û—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤: {remainingCredits}</p>
          </div>
        )}
      </div>
    </div>
  );
}
